@model List<CalendarItem>
<div id="calendar-section">
    <div id="calendar">
        @foreach (var item in Model)
        {
            <p>@item.Summary - @item.Start</p>
        }
    </div>
</div>


@*
        <button id="authorize-button" style="display: none;">Authorize</button>
        <button id="signout-button" class="hidden" style="display: none;">Sign Out</button>

    <script type="text/javascript">

    // Client ID and API key from the Developer Console
        var CLIENT_ID = 'SECRET.apps.googleusercontent.com'; //TODO

    // Array of API discovery doc URLs for APIs used by the quickstart
        var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];

    // Authorization scopes required by the API; multiple scopes can be
    // included, separated by spaces.
        var SCOPES = "https://www.googleapis.com/auth/calendar.readonly";

        var authorizeButton = document.getElementById('authorize-button');
        var signoutButton = document.getElementById('signout-button');

        setInterval(function() { listUpcomingEvents() }, 30000);

    /**
     *  On load, called to load the auth2 library and API client library.
     */
        function handleClientLoad() {
            gapi.load('client:auth2', initClient);
        }

    /**
     *  Initializes the API client library and sets up sign-in state
     *  listeners.
     */
        function initClient() {
            gapi.client.init({
                discoveryDocs: DISCOVERY_DOCS,
                clientId: CLIENT_ID,
                scope: SCOPES
            }).then(function () {
                // Listen for sign-in state changes.
                gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

                // Handle the initial sign-in state.
                updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
                authorizeButton.onclick = handleAuthClick;
                signoutButton.onclick = handleSignoutClick;
            });
        }

    /**
     *  Called when the signed in status changes, to update the UI
     *  appropriately. After a sign-in, the API is called.
     */
        function updateSigninStatus(isSignedIn) {
            if (isSignedIn) {
                authorizeButton.style.display = 'none';
                signoutButton.style.display = 'none';
                listUpcomingEvents();
            } else {
                authorizeButton.style.display = 'block';
                signoutButton.style.display = 'none';
            }
        }

    /**
     *  Sign in the user upon button click.
     */
        function handleAuthClick(event) {
            gapi.auth2.getAuthInstance().signIn();
        }

    /**
     *  Sign out the user upon button click.
     */
        function handleSignoutClick(event) {
            gapi.auth2.getAuthInstance().signOut();
        }

    /**
     * Append a pre element to the body containing the given message
     * as its text node. Used to display the results of the API call.
     *
     * param {string} message Text to be placed in pre element.
     */
        //function appendPre(message) {
        //    console.log(message);
        //    var calendarDiv = document.getElementById('content');

        //    calendarDiv.append($('<p>').text(message));

        //    //var textContent = document.createTextNode(message + '\n');
        //    //pre.appendChild(textContent);
        //}

    /**
     * Print the summary and start datetime/date of the next ten events in
     * the authorized user's calendar. If no events are found an
     * appropriate message is printed.
     */
        function listUpcomingEvents() {
            console.log("listing events");
            gapi.client.calendar.events.list({
                'calendarId': 'e0f9nl8p2pprjn7sab05v4ad5s@group.calendar.google.com',
                'timeMin': (new Date()).toISOString(),
                'showDeleted': false,
                'singleEvents': true,
                'maxResults': 5,
                'orderBy': 'startTime'
            }).then(function (response) {
                var events = response.result.items;
                /*appendPre('Upcoming:');*/

                var calendar = $('#calendar');
                calendar.text("");
                if (events.length > 0) {
                    for (i = 0; i < events.length; i++) {
                        var event = events[i];
                        var when;
                        var today = new Date();
                        var startDate;
                        var startTime;
                        var date1_tomorrow = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);

                        //Whole day events
                        if (event.start.date) {
                            when = event.start.date;
                            startDate = new Date(when);
                            if (startDate.getDate() === today.getDate()) {
                                startDate = "Today";
                            }
                            else if (date1_tomorrow.getFullYear() == startDate.getFullYear() && date1_tomorrow.getMonth() == startDate.getMonth() && date1_tomorrow.getDate() == startDate.getDate()) {
                                startDate = "Tomorrow";
                            }
                            startDate = startDate.toLocaleString("en-US", { weekday: "short", month: "short",
                                day: "numeric"});
                        }
                        //Events with start time
                        else if  (event.start.dateTime) {
                            when = event.start.dateTime;
                            startDate = new Date(when);

                            var startHours = new Date(when).getHours();
                            var startMinutes = new Date(when).getMinutes();
                            startHours = (startHours < 10) ? ("0" + startHours) : startHours;
                            startMinutes = (startMinutes < 10) ? ("0" + startMinutes) : startMinutes;

                            startTime = startHours + ":" + startMinutes;
                            if (startDate.getDate() === today.getDate()) {
                                startDate = "Today at " + startTime;
                            }
                            else if (date1_tomorrow.getFullYear() == startDate.getFullYear() &&
                                date1_tomorrow.getMonth() == startDate.getMonth() &&
                                date1_tomorrow.getDate() == startDate.getDate()) {
                                startDate = "Tomorrow at " + startTime;
                            } else {
                                startDate = startDate.toLocaleString("en-US", { weekday: "short", month: "short",
                                        day: "numeric"}) + " at " +
                                    (startTime.toLocaleString("sv-SE", { hour: "2-digit", minute: "2-digit" }));
                            }
                            //startDate = startDate.toLocaleString("en-US", { weekday: "short", month: "short",
                            //    day: "numeric", hour: "2-digit", minute: "2-digit"});
                        }

                        //if (startDate.getDate() === today.getDate()) {
                        //    startDate = "Today";
                        //}
                        //else if (date1_tomorrow.getFullYear() == startDate.getFullYear() && date1_tomorrow.getMonth() == startDate.getMonth() && date1_tomorrow.getDate() == startDate.getDate()) {
                        //    startDate = "Tomorrow";
                        //}
                        //startDate = startDate.toLocaleString("en-US", { weekday: "short", month: "short",
                        //    day: "numeric", hour: "2-digit", minute: "2-digit"});
                        calendar.append($('<p>').html(event.summary + '<span class="calendar-date"> - ' + startDate + '</span>'));
                        //appendPre(event.summary + ' (' + when + ')')
                    }
                } else {
                    calendar.append($('<p>').text("No events found"));
                }
            });
        }

    </script>

    <script async defer src="https://apis.google.com/js/api.js"
            onload="this.onload=function(){};handleClientLoad()"
            onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>*@
